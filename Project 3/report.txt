A. The most notable obstacles that had to be overcome while writing this program was string array out of index errors, where the while loops would attempt to check values that were outside of the string array index, specifically the end of the string. Other problems encountered consisted of the program running through the same while loop multiple times, or not exiting it after a return statement was executed.
B. The hasCorrectSyntax function runs a while loop that runs until the end of the string is reached. Every iteration calls the loopCheck function, which checks from one note character to the next one as to whether it is a valid note. The loopCheck function returns the position of the next note character in the song string, which allows hasCorrectSyntax to call it until the end of the string is reached. If incorrect song string syntax is detected, loopCheck returns -1 which is then translated as false for hasCorrectSyntax. In the event the end of a string is reached and no error is encountered, loopCheck returns -2, which translates as true for hasCorrectSyntax.
The encodeSong function is divided into three sections. 
The first section tests that given the song string is true for hasCorrectSyntax, it encodes the song into the correct format. It does so by calling the singleNote function, which tests for whether any given series of notes is a chord. It does so by checking for multiple notes within a single series of '/' characters, and if it does, it returns false. Depending on whether singleNote is true, the encodeSong function then calls either encodeOneNote or encodeChord, which then encodes the series of notes accordingly. The difference between the two functions is that encodeChord inserts a '[' character at the beginning of the encoding process and a ']' at the end while encodeOneNote encodes the notes from one '/' character to the next without adding in any square brackets.
The second section tests whether given that the strong does not have correct syntax, if it is still in the correct song format. It calls the isASong function, which is very similar to hasCorrectSyntax except it is looser and checks for all numbers 0 through 9 for the octave value. If both hasCorrectSyntax and isASong return false, then econdeSong returns false as it is neither a playable song nor a song.
The third section tests whether the song string is a valid song string, just not playable by the ButtonBass software. This function relies on the testOneBeat function to test every beat of the song to see whether it is a valid beat. If any encountered beat is not valid, it changes the badBeat variable to equate the incremented beat counter and returns the value 2.
C.  Test 1: :empty song; should return valid.
	Test 2:/:single beat; should return valid.
	Test 3://:multiple beats; should return valid.
	Test 4:A/:single beat; tests for out of array index exception; should return valid.
	Test 5:A:no beat ending; should return invalid.
	Test 6:Cb6/:tests for edge scenario; should return valid.
	Test 7:C6/:tests for edge scenario; should return valid.
	Test 8:B#1/:tests for edge scenario; should return valid.
	Test 9:Cb2/:tests for edge scenario; should return invalid.
	Test 10:C#6/: tests for edge scenario; should return invalid.
	Test 11:B1/: tests for edge scenario; should return invalid.
	Test 12:C0C0DC0DD/E#FbB#Cb/B#9/:valid song; not playable; should return 2 with badBeat of 1.
	Test 13:G3B3DD5//G/A/A3B/C5/B3D5//G//G//CE5//C5/D5/E5/F#5/B3G5//G//G/:valid song and playable; checks for correct encoding.
	Test 14:E/E/E/E/E/E/E/E/E/E/E/E/AE/E/E/BE/E/E/E/E/E/AEA3/B3BE/C3C5E/B3BE/A3AE/B3BE/C3C5E/E/E/B3BE/E/E/E/E/E/A3AE/E/E5E/C3C5E/E/E/BB3E/E/E/E/E/E/BEB3/AEA3/BEB3/C3C5E/E/E/B3BE/E/E/E/E/E/A3AE/EE5/C3C5E/EBB3/AA3E/EBB3/C3CE/E/E/D3D5E/E/E/E5E/E/E/E/E/E/E/:valid song; playable; checks for accuracy on ButtonBass.
	Test 15:DF#AF#5/A5/F#5/E5/F#5/E5/F#5//EGBF#5/E5/B/D5/F#5/E5///DGBE5/D5/B/D5/E5/F#5/A5/E5/C#EAF#5/B5/A5/B/DF#AE5/D5///D3F#5/A3A5/F#F#5/E5/D3F#5/A3E5/F#F#5//E3F#5/B3E5/GB/D5/E3E5/B3E5/G/B3/G2E5/B3D5/GB/D5/G3E5/B3F#5/F#A5/E5//A2F#5/A3B5/EA5/B/D3E5/A3E5/F#/D/E2E5/E3D5/B3B/D5/G3E5/B3F#5/F#A5/F#5/D3F#5/A3A5/F#A5/A5/F#3F#5/C#/F#//G2E5/D3E5/G3E5/B3D5/DA5/A5/GE5//A3DEB/B/F#5//E5//F#5//D3F#5/A3A5/DF#F#5/A3E5/D3F#5/A3E5/DF#F#5/A3/E3F#5/B3E5/EGB/B3D5/E3E5/B3E5/EG/B3/G3E5/B3D5/DGB/B3D5/G3E5/B3F#5/DGA5/B3E5/A2F#5/A3B5/C#EGA5/A3B/D3E5/A3D5/DF#/A3/E3E5/B3D5/EGB/B3D5//G3E5/B3F#5/DGA5/B3F#5/D3F#5/A3A5/DF#A5/A3A5/F#3F#5/A3/C#F#/A3/G3E5/B3E5/DGE5/B3D5/E3A5/A3A5/EGE5/A3/A2B/A3F#5/C#EE5/A3F#5/D2A2/D3////F#5//A5//G2G5/G3A5/B3DGA5/B5/G2/D3B5/B3DGA5/A3C#F#A5/B2F#3DF#5/A5/:valid song; playable; checks for accuracy on ButtonBass.